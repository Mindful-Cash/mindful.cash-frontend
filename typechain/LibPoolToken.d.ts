/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from "ethers";
import {Listener, Provider} from "ethers/providers";
import {Arrayish, BigNumber, BigNumberish, Interface} from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface LibPoolTokenInterface extends Interface {
  functions: {};

  events: {
    Transfer: TypedEventDescription<{
      encodeTopics([_src, _dst, _amount]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;
  };
}

export class LibPoolToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): LibPoolToken;
  attach(addressOrName: string): LibPoolToken;
  deployed(): Promise<LibPoolToken>;

  on(event: EventFilter | string, listener: Listener): LibPoolToken;
  once(event: EventFilter | string, listener: Listener): LibPoolToken;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): LibPoolToken;
  removeAllListeners(eventName: EventFilter | string): LibPoolToken;
  removeListener(eventName: any, listener: Listener): LibPoolToken;

  interface: LibPoolTokenInterface;

  functions: {};

  filters: {
    Transfer(
      _src: string | null,
      _dst: string | null,
      _amount: null
    ): EventFilter;
  };

  estimate: {};
}
