/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from "ethers";
import {Listener, Provider} from "ethers/providers";
import {Arrayish, BigNumber, BigNumberish, Interface} from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface IUniswapV2ExchangeInterface extends Interface {
  functions: {
    getReserves: TypedFunctionDescription<{encode([]: []): string}>;

    swap: TypedFunctionDescription<{
      encode([amount0Out, amount1Out, to, data]: [
        BigNumberish,
        BigNumberish,
        string,
        Arrayish
      ]): string;
    }>;

    token0: TypedFunctionDescription<{encode([]: []): string}>;

    token1: TypedFunctionDescription<{encode([]: []): string}>;
  };

  events: {};
}

export class IUniswapV2Exchange extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IUniswapV2Exchange;
  attach(addressOrName: string): IUniswapV2Exchange;
  deployed(): Promise<IUniswapV2Exchange>;

  on(event: EventFilter | string, listener: Listener): IUniswapV2Exchange;
  once(event: EventFilter | string, listener: Listener): IUniswapV2Exchange;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): IUniswapV2Exchange;
  removeAllListeners(eventName: EventFilter | string): IUniswapV2Exchange;
  removeListener(eventName: any, listener: Listener): IUniswapV2Exchange;

  interface: IUniswapV2ExchangeInterface;

  functions: {
    getReserves(
      overrides?: TransactionOverrides
    ): Promise<{
      reserve0: BigNumber;
      reserve1: BigNumber;
      blockTimestampLast: number;
      0: BigNumber;
      1: BigNumber;
      2: number;
    }>;

    "getReserves()"(
      overrides?: TransactionOverrides
    ): Promise<{
      reserve0: BigNumber;
      reserve1: BigNumber;
      blockTimestampLast: number;
      0: BigNumber;
      1: BigNumber;
      2: number;
    }>;

    swap(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "swap(uint256,uint256,address,bytes)"(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    token0(overrides?: TransactionOverrides): Promise<string>;

    "token0()"(overrides?: TransactionOverrides): Promise<string>;

    token1(overrides?: TransactionOverrides): Promise<string>;

    "token1()"(overrides?: TransactionOverrides): Promise<string>;
  };

  getReserves(
    overrides?: TransactionOverrides
  ): Promise<{
    reserve0: BigNumber;
    reserve1: BigNumber;
    blockTimestampLast: number;
    0: BigNumber;
    1: BigNumber;
    2: number;
  }>;

  "getReserves()"(
    overrides?: TransactionOverrides
  ): Promise<{
    reserve0: BigNumber;
    reserve1: BigNumber;
    blockTimestampLast: number;
    0: BigNumber;
    1: BigNumber;
    2: number;
  }>;

  swap(
    amount0Out: BigNumberish,
    amount1Out: BigNumberish,
    to: string,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "swap(uint256,uint256,address,bytes)"(
    amount0Out: BigNumberish,
    amount1Out: BigNumberish,
    to: string,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  token0(overrides?: TransactionOverrides): Promise<string>;

  "token0()"(overrides?: TransactionOverrides): Promise<string>;

  token1(overrides?: TransactionOverrides): Promise<string>;

  "token1()"(overrides?: TransactionOverrides): Promise<string>;

  filters: {};

  estimate: {
    getReserves(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getReserves()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    swap(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "swap(uint256,uint256,address,bytes)"(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    token0(overrides?: TransactionOverrides): Promise<BigNumber>;

    "token0()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    token1(overrides?: TransactionOverrides): Promise<BigNumber>;

    "token1()"(overrides?: TransactionOverrides): Promise<BigNumber>;
  };
}
