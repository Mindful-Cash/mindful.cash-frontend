/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from "ethers";
import {Listener, Provider} from "ethers/providers";
import {Arrayish, BigNumber, BigNumberish, Interface} from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface IbPoolInterface extends Interface {
  functions: {
    bind: TypedFunctionDescription<{
      encode([token, balance, denorm]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    calcPoolInGivenSingleOut: TypedFunctionDescription<{
      encode([
        tokenBalanceOut,
        tokenWeightOut,
        poolSupply,
        totalWeight,
        tokenAmountOut,
        swapFee
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    calcPoolOutGivenSingleIn: TypedFunctionDescription<{
      encode([
        tokenBalanceIn,
        tokenWeightIn,
        poolSupply,
        totalWeight,
        tokenAmountIn,
        swapFee
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    calcSingleInGivenPoolOut: TypedFunctionDescription<{
      encode([
        tokenBalanceIn,
        tokenWeightIn,
        poolSupply,
        totalWeight,
        poolAmountOut,
        swapFee
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    calcSingleOutGivenPoolIn: TypedFunctionDescription<{
      encode([
        tokenBalanceOut,
        tokenWeightOut,
        poolSupply,
        totalWeight,
        poolAmountIn,
        swapFee
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    getBalance: TypedFunctionDescription<{encode([token]: [string]): string}>;

    getCurrentTokens: TypedFunctionDescription<{encode([]: []): string}>;

    getDenormalizedWeight: TypedFunctionDescription<{
      encode([token]: [string]): string;
    }>;

    getSwapFee: TypedFunctionDescription<{encode([]: []): string}>;

    getTotalDenormalizedWeight: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    gulp: TypedFunctionDescription<{encode([token]: [string]): string}>;

    isBound: TypedFunctionDescription<{encode([token]: [string]): string}>;

    isPublicSwap: TypedFunctionDescription<{encode([]: []): string}>;

    rebind: TypedFunctionDescription<{
      encode([token, balance, denorm]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    setController: TypedFunctionDescription<{
      encode([manager]: [string]): string;
    }>;

    setPublicSwap: TypedFunctionDescription<{
      encode([_public]: [boolean]): string;
    }>;

    setSwapFee: TypedFunctionDescription<{
      encode([swapFee]: [BigNumberish]): string;
    }>;

    unbind: TypedFunctionDescription<{encode([token]: [string]): string}>;
  };

  events: {};
}

export class IbPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IbPool;
  attach(addressOrName: string): IbPool;
  deployed(): Promise<IbPool>;

  on(event: EventFilter | string, listener: Listener): IbPool;
  once(event: EventFilter | string, listener: Listener): IbPool;
  addListener(eventName: EventFilter | string, listener: Listener): IbPool;
  removeAllListeners(eventName: EventFilter | string): IbPool;
  removeListener(eventName: any, listener: Listener): IbPool;

  interface: IbPoolInterface;

  functions: {
    bind(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "bind(address,uint256,uint256)"(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    calcPoolInGivenSingleOut(
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      tokenAmountOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "calcPoolInGivenSingleOut(uint256,uint256,uint256,uint256,uint256,uint256)"(
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      tokenAmountOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    calcPoolOutGivenSingleIn(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      tokenAmountIn: BigNumberish,
      swapFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "calcPoolOutGivenSingleIn(uint256,uint256,uint256,uint256,uint256,uint256)"(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      tokenAmountIn: BigNumberish,
      swapFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    calcSingleInGivenPoolOut(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      poolAmountOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "calcSingleInGivenPoolOut(uint256,uint256,uint256,uint256,uint256,uint256)"(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      poolAmountOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    calcSingleOutGivenPoolIn(
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      poolAmountIn: BigNumberish,
      swapFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "calcSingleOutGivenPoolIn(uint256,uint256,uint256,uint256,uint256,uint256)"(
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      poolAmountIn: BigNumberish,
      swapFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getBalance(
      token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getBalance(address)"(
      token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getCurrentTokens(overrides?: TransactionOverrides): Promise<string[]>;

    "getCurrentTokens()"(overrides?: TransactionOverrides): Promise<string[]>;

    getDenormalizedWeight(
      token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getDenormalizedWeight(address)"(
      token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getSwapFee(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getSwapFee()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getTotalDenormalizedWeight(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getTotalDenormalizedWeight()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    gulp(
      token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "gulp(address)"(
      token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    isBound(token: string, overrides?: TransactionOverrides): Promise<boolean>;

    "isBound(address)"(
      token: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    isPublicSwap(overrides?: TransactionOverrides): Promise<boolean>;

    "isPublicSwap()"(overrides?: TransactionOverrides): Promise<boolean>;

    rebind(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "rebind(address,uint256,uint256)"(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setController(
      manager: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setController(address)"(
      manager: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setPublicSwap(
      _public: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setPublicSwap(bool)"(
      _public: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setSwapFee(
      swapFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setSwapFee(uint256)"(
      swapFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    unbind(
      token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "unbind(address)"(
      token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  bind(
    token: string,
    balance: BigNumberish,
    denorm: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "bind(address,uint256,uint256)"(
    token: string,
    balance: BigNumberish,
    denorm: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  calcPoolInGivenSingleOut(
    tokenBalanceOut: BigNumberish,
    tokenWeightOut: BigNumberish,
    poolSupply: BigNumberish,
    totalWeight: BigNumberish,
    tokenAmountOut: BigNumberish,
    swapFee: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "calcPoolInGivenSingleOut(uint256,uint256,uint256,uint256,uint256,uint256)"(
    tokenBalanceOut: BigNumberish,
    tokenWeightOut: BigNumberish,
    poolSupply: BigNumberish,
    totalWeight: BigNumberish,
    tokenAmountOut: BigNumberish,
    swapFee: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  calcPoolOutGivenSingleIn(
    tokenBalanceIn: BigNumberish,
    tokenWeightIn: BigNumberish,
    poolSupply: BigNumberish,
    totalWeight: BigNumberish,
    tokenAmountIn: BigNumberish,
    swapFee: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "calcPoolOutGivenSingleIn(uint256,uint256,uint256,uint256,uint256,uint256)"(
    tokenBalanceIn: BigNumberish,
    tokenWeightIn: BigNumberish,
    poolSupply: BigNumberish,
    totalWeight: BigNumberish,
    tokenAmountIn: BigNumberish,
    swapFee: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  calcSingleInGivenPoolOut(
    tokenBalanceIn: BigNumberish,
    tokenWeightIn: BigNumberish,
    poolSupply: BigNumberish,
    totalWeight: BigNumberish,
    poolAmountOut: BigNumberish,
    swapFee: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "calcSingleInGivenPoolOut(uint256,uint256,uint256,uint256,uint256,uint256)"(
    tokenBalanceIn: BigNumberish,
    tokenWeightIn: BigNumberish,
    poolSupply: BigNumberish,
    totalWeight: BigNumberish,
    poolAmountOut: BigNumberish,
    swapFee: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  calcSingleOutGivenPoolIn(
    tokenBalanceOut: BigNumberish,
    tokenWeightOut: BigNumberish,
    poolSupply: BigNumberish,
    totalWeight: BigNumberish,
    poolAmountIn: BigNumberish,
    swapFee: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "calcSingleOutGivenPoolIn(uint256,uint256,uint256,uint256,uint256,uint256)"(
    tokenBalanceOut: BigNumberish,
    tokenWeightOut: BigNumberish,
    poolSupply: BigNumberish,
    totalWeight: BigNumberish,
    poolAmountIn: BigNumberish,
    swapFee: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getBalance(
    token: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getBalance(address)"(
    token: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getCurrentTokens(overrides?: TransactionOverrides): Promise<string[]>;

  "getCurrentTokens()"(overrides?: TransactionOverrides): Promise<string[]>;

  getDenormalizedWeight(
    token: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getDenormalizedWeight(address)"(
    token: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getSwapFee(overrides?: TransactionOverrides): Promise<BigNumber>;

  "getSwapFee()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  getTotalDenormalizedWeight(
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getTotalDenormalizedWeight()"(
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  gulp(
    token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "gulp(address)"(
    token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  isBound(token: string, overrides?: TransactionOverrides): Promise<boolean>;

  "isBound(address)"(
    token: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  isPublicSwap(overrides?: TransactionOverrides): Promise<boolean>;

  "isPublicSwap()"(overrides?: TransactionOverrides): Promise<boolean>;

  rebind(
    token: string,
    balance: BigNumberish,
    denorm: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "rebind(address,uint256,uint256)"(
    token: string,
    balance: BigNumberish,
    denorm: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setController(
    manager: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setController(address)"(
    manager: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setPublicSwap(
    _public: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setPublicSwap(bool)"(
    _public: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setSwapFee(
    swapFee: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setSwapFee(uint256)"(
    swapFee: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  unbind(
    token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "unbind(address)"(
    token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    bind(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "bind(address,uint256,uint256)"(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    calcPoolInGivenSingleOut(
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      tokenAmountOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "calcPoolInGivenSingleOut(uint256,uint256,uint256,uint256,uint256,uint256)"(
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      tokenAmountOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    calcPoolOutGivenSingleIn(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      tokenAmountIn: BigNumberish,
      swapFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "calcPoolOutGivenSingleIn(uint256,uint256,uint256,uint256,uint256,uint256)"(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      tokenAmountIn: BigNumberish,
      swapFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    calcSingleInGivenPoolOut(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      poolAmountOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "calcSingleInGivenPoolOut(uint256,uint256,uint256,uint256,uint256,uint256)"(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      poolAmountOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    calcSingleOutGivenPoolIn(
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      poolAmountIn: BigNumberish,
      swapFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "calcSingleOutGivenPoolIn(uint256,uint256,uint256,uint256,uint256,uint256)"(
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      poolAmountIn: BigNumberish,
      swapFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getBalance(
      token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getBalance(address)"(
      token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getCurrentTokens(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getCurrentTokens()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getDenormalizedWeight(
      token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getDenormalizedWeight(address)"(
      token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getSwapFee(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getSwapFee()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getTotalDenormalizedWeight(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getTotalDenormalizedWeight()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    gulp(token: string, overrides?: TransactionOverrides): Promise<BigNumber>;

    "gulp(address)"(
      token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    isBound(
      token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "isBound(address)"(
      token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    isPublicSwap(overrides?: TransactionOverrides): Promise<BigNumber>;

    "isPublicSwap()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    rebind(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "rebind(address,uint256,uint256)"(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setController(
      manager: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setController(address)"(
      manager: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setPublicSwap(
      _public: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setPublicSwap(bool)"(
      _public: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setSwapFee(
      swapFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setSwapFee(uint256)"(
      swapFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    unbind(token: string, overrides?: TransactionOverrides): Promise<BigNumber>;

    "unbind(address)"(
      token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
