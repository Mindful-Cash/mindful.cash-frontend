/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from "ethers";
import {Listener, Provider} from "ethers/providers";
import {Arrayish, BigNumber, BigNumberish, Interface} from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface IUniswapV2PairInterface extends Interface {
  functions: {
    DOMAIN_SEPARATOR: TypedFunctionDescription<{encode([]: []): string}>;

    MINIMUM_LIQUIDITY: TypedFunctionDescription<{encode([]: []): string}>;

    PERMIT_TYPEHASH: TypedFunctionDescription<{encode([]: []): string}>;

    allowance: TypedFunctionDescription<{
      encode([owner, spender]: [string, string]): string;
    }>;

    approve: TypedFunctionDescription<{
      encode([spender, value]: [string, BigNumberish]): string;
    }>;

    balanceOf: TypedFunctionDescription<{encode([owner]: [string]): string}>;

    burn: TypedFunctionDescription<{encode([to]: [string]): string}>;

    decimals: TypedFunctionDescription<{encode([]: []): string}>;

    factory: TypedFunctionDescription<{encode([]: []): string}>;

    getReserves: TypedFunctionDescription<{encode([]: []): string}>;

    initialize: TypedFunctionDescription<{
      encode([,]: [string, string]): string;
    }>;

    kLast: TypedFunctionDescription<{encode([]: []): string}>;

    mint: TypedFunctionDescription<{encode([to]: [string]): string}>;

    name: TypedFunctionDescription<{encode([]: []): string}>;

    nonces: TypedFunctionDescription<{encode([owner]: [string]): string}>;

    permit: TypedFunctionDescription<{
      encode([owner, spender, value, deadline, v, r, s]: [
        string,
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        Arrayish,
        Arrayish
      ]): string;
    }>;

    price0CumulativeLast: TypedFunctionDescription<{encode([]: []): string}>;

    price1CumulativeLast: TypedFunctionDescription<{encode([]: []): string}>;

    skim: TypedFunctionDescription<{encode([to]: [string]): string}>;

    swap: TypedFunctionDescription<{
      encode([amount0Out, amount1Out, to, data]: [
        BigNumberish,
        BigNumberish,
        string,
        Arrayish
      ]): string;
    }>;

    symbol: TypedFunctionDescription<{encode([]: []): string}>;

    sync: TypedFunctionDescription<{encode([]: []): string}>;

    token0: TypedFunctionDescription<{encode([]: []): string}>;

    token1: TypedFunctionDescription<{encode([]: []): string}>;

    totalSupply: TypedFunctionDescription<{encode([]: []): string}>;

    transfer: TypedFunctionDescription<{
      encode([to, value]: [string, BigNumberish]): string;
    }>;

    transferFrom: TypedFunctionDescription<{
      encode([from, to, value]: [string, string, BigNumberish]): string;
    }>;
  };

  events: {
    Approval: TypedEventDescription<{
      encodeTopics([owner, spender, value]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    Burn: TypedEventDescription<{
      encodeTopics([sender, amount0, amount1, to]: [
        string | null,
        null,
        null,
        string | null
      ]): string[];
    }>;

    Mint: TypedEventDescription<{
      encodeTopics([sender, amount0, amount1]: [
        string | null,
        null,
        null
      ]): string[];
    }>;

    Swap: TypedEventDescription<{
      encodeTopics([sender, amount0In, amount1In, amount0Out, amount1Out, to]: [
        string | null,
        null,
        null,
        null,
        null,
        string | null
      ]): string[];
    }>;

    Sync: TypedEventDescription<{
      encodeTopics([reserve0, reserve1]: [null, null]): string[];
    }>;

    Transfer: TypedEventDescription<{
      encodeTopics([from, to, value]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;
  };
}

export class IUniswapV2Pair extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IUniswapV2Pair;
  attach(addressOrName: string): IUniswapV2Pair;
  deployed(): Promise<IUniswapV2Pair>;

  on(event: EventFilter | string, listener: Listener): IUniswapV2Pair;
  once(event: EventFilter | string, listener: Listener): IUniswapV2Pair;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): IUniswapV2Pair;
  removeAllListeners(eventName: EventFilter | string): IUniswapV2Pair;
  removeListener(eventName: any, listener: Listener): IUniswapV2Pair;

  interface: IUniswapV2PairInterface;

  functions: {
    DOMAIN_SEPARATOR(overrides?: TransactionOverrides): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: TransactionOverrides): Promise<string>;

    MINIMUM_LIQUIDITY(overrides?: TransactionOverrides): Promise<BigNumber>;

    "MINIMUM_LIQUIDITY()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: TransactionOverrides): Promise<string>;

    "PERMIT_TYPEHASH()"(overrides?: TransactionOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    burn(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "burn(address)"(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    decimals(overrides?: TransactionOverrides): Promise<number>;

    "decimals()"(overrides?: TransactionOverrides): Promise<number>;

    factory(overrides?: TransactionOverrides): Promise<string>;

    "factory()"(overrides?: TransactionOverrides): Promise<string>;

    getReserves(
      overrides?: TransactionOverrides
    ): Promise<{
      reserve0: BigNumber;
      reserve1: BigNumber;
      blockTimestampLast: number;
      0: BigNumber;
      1: BigNumber;
      2: number;
    }>;

    "getReserves()"(
      overrides?: TransactionOverrides
    ): Promise<{
      reserve0: BigNumber;
      reserve1: BigNumber;
      blockTimestampLast: number;
      0: BigNumber;
      1: BigNumber;
      2: number;
    }>;

    initialize(
      arg0: string,
      arg1: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    kLast(overrides?: TransactionOverrides): Promise<BigNumber>;

    "kLast()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    mint(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "mint(address)"(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    name(overrides?: TransactionOverrides): Promise<string>;

    "name()"(overrides?: TransactionOverrides): Promise<string>;

    nonces(owner: string, overrides?: TransactionOverrides): Promise<BigNumber>;

    "nonces(address)"(
      owner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    price0CumulativeLast(overrides?: TransactionOverrides): Promise<BigNumber>;

    "price0CumulativeLast()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    price1CumulativeLast(overrides?: TransactionOverrides): Promise<BigNumber>;

    "price1CumulativeLast()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    skim(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "skim(address)"(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    swap(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "swap(uint256,uint256,address,bytes)"(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    symbol(overrides?: TransactionOverrides): Promise<string>;

    "symbol()"(overrides?: TransactionOverrides): Promise<string>;

    sync(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    "sync()"(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    token0(overrides?: TransactionOverrides): Promise<string>;

    "token0()"(overrides?: TransactionOverrides): Promise<string>;

    token1(overrides?: TransactionOverrides): Promise<string>;

    "token1()"(overrides?: TransactionOverrides): Promise<string>;

    totalSupply(overrides?: TransactionOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: TransactionOverrides): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: TransactionOverrides): Promise<string>;

  MINIMUM_LIQUIDITY(overrides?: TransactionOverrides): Promise<BigNumber>;

  "MINIMUM_LIQUIDITY()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  PERMIT_TYPEHASH(overrides?: TransactionOverrides): Promise<string>;

  "PERMIT_TYPEHASH()"(overrides?: TransactionOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  balanceOf(
    owner: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  burn(
    to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "burn(address)"(
    to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  decimals(overrides?: TransactionOverrides): Promise<number>;

  "decimals()"(overrides?: TransactionOverrides): Promise<number>;

  factory(overrides?: TransactionOverrides): Promise<string>;

  "factory()"(overrides?: TransactionOverrides): Promise<string>;

  getReserves(
    overrides?: TransactionOverrides
  ): Promise<{
    reserve0: BigNumber;
    reserve1: BigNumber;
    blockTimestampLast: number;
    0: BigNumber;
    1: BigNumber;
    2: number;
  }>;

  "getReserves()"(
    overrides?: TransactionOverrides
  ): Promise<{
    reserve0: BigNumber;
    reserve1: BigNumber;
    blockTimestampLast: number;
    0: BigNumber;
    1: BigNumber;
    2: number;
  }>;

  initialize(
    arg0: string,
    arg1: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  kLast(overrides?: TransactionOverrides): Promise<BigNumber>;

  "kLast()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  mint(
    to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "mint(address)"(
    to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  name(overrides?: TransactionOverrides): Promise<string>;

  "name()"(overrides?: TransactionOverrides): Promise<string>;

  nonces(owner: string, overrides?: TransactionOverrides): Promise<BigNumber>;

  "nonces(address)"(
    owner: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: Arrayish,
    s: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: Arrayish,
    s: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  price0CumulativeLast(overrides?: TransactionOverrides): Promise<BigNumber>;

  "price0CumulativeLast()"(
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  price1CumulativeLast(overrides?: TransactionOverrides): Promise<BigNumber>;

  "price1CumulativeLast()"(
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  skim(
    to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "skim(address)"(
    to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  swap(
    amount0Out: BigNumberish,
    amount1Out: BigNumberish,
    to: string,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "swap(uint256,uint256,address,bytes)"(
    amount0Out: BigNumberish,
    amount1Out: BigNumberish,
    to: string,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  symbol(overrides?: TransactionOverrides): Promise<string>;

  "symbol()"(overrides?: TransactionOverrides): Promise<string>;

  sync(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  "sync()"(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  token0(overrides?: TransactionOverrides): Promise<string>;

  "token0()"(overrides?: TransactionOverrides): Promise<string>;

  token1(overrides?: TransactionOverrides): Promise<string>;

  "token1()"(overrides?: TransactionOverrides): Promise<string>;

  totalSupply(overrides?: TransactionOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    to: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    Burn(
      sender: string | null,
      amount0: null,
      amount1: null,
      to: string | null
    ): EventFilter;

    Mint(sender: string | null, amount0: null, amount1: null): EventFilter;

    Swap(
      sender: string | null,
      amount0In: null,
      amount1In: null,
      amount0Out: null,
      amount1Out: null,
      to: string | null
    ): EventFilter;

    Sync(reserve0: null, reserve1: null): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;
  };

  estimate: {
    DOMAIN_SEPARATOR(overrides?: TransactionOverrides): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    MINIMUM_LIQUIDITY(overrides?: TransactionOverrides): Promise<BigNumber>;

    "MINIMUM_LIQUIDITY()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: TransactionOverrides): Promise<BigNumber>;

    "PERMIT_TYPEHASH()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    balanceOf(
      owner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    burn(to: string, overrides?: TransactionOverrides): Promise<BigNumber>;

    "burn(address)"(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: TransactionOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    factory(overrides?: TransactionOverrides): Promise<BigNumber>;

    "factory()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getReserves(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getReserves()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    initialize(
      arg0: string,
      arg1: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    kLast(overrides?: TransactionOverrides): Promise<BigNumber>;

    "kLast()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    mint(to: string, overrides?: TransactionOverrides): Promise<BigNumber>;

    "mint(address)"(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    name(overrides?: TransactionOverrides): Promise<BigNumber>;

    "name()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    nonces(owner: string, overrides?: TransactionOverrides): Promise<BigNumber>;

    "nonces(address)"(
      owner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    price0CumulativeLast(overrides?: TransactionOverrides): Promise<BigNumber>;

    "price0CumulativeLast()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    price1CumulativeLast(overrides?: TransactionOverrides): Promise<BigNumber>;

    "price1CumulativeLast()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    skim(to: string, overrides?: TransactionOverrides): Promise<BigNumber>;

    "skim(address)"(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    swap(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "swap(uint256,uint256,address,bytes)"(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: TransactionOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    sync(overrides?: TransactionOverrides): Promise<BigNumber>;

    "sync()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    token0(overrides?: TransactionOverrides): Promise<BigNumber>;

    "token0()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    token1(overrides?: TransactionOverrides): Promise<BigNumber>;

    "token1()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    totalSupply(overrides?: TransactionOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
