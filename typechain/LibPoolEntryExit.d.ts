/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from "ethers";
import {Listener, Provider} from "ethers/providers";
import {Arrayish, BigNumber, BigNumberish, Interface} from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface LibPoolEntryExitInterface extends Interface {
  functions: {};

  events: {
    LOG_EXIT: TypedEventDescription<{
      encodeTopics([caller, tokenOut, tokenAmountOut]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    LOG_JOIN: TypedEventDescription<{
      encodeTopics([caller, tokenIn, tokenAmountIn]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    PoolExited: TypedEventDescription<{
      encodeTopics([from, amount]: [string | null, null]): string[];
    }>;

    PoolExitedWithLoss: TypedEventDescription<{
      encodeTopics([from, amount, lossTokens]: [
        string | null,
        null,
        null
      ]): string[];
    }>;

    PoolJoined: TypedEventDescription<{
      encodeTopics([from, amount]: [string | null, null]): string[];
    }>;
  };
}

export class LibPoolEntryExit extends Contract {
  connect(signerOrProvider: Signer | Provider | string): LibPoolEntryExit;
  attach(addressOrName: string): LibPoolEntryExit;
  deployed(): Promise<LibPoolEntryExit>;

  on(event: EventFilter | string, listener: Listener): LibPoolEntryExit;
  once(event: EventFilter | string, listener: Listener): LibPoolEntryExit;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): LibPoolEntryExit;
  removeAllListeners(eventName: EventFilter | string): LibPoolEntryExit;
  removeListener(eventName: any, listener: Listener): LibPoolEntryExit;

  interface: LibPoolEntryExitInterface;

  functions: {};

  filters: {
    LOG_EXIT(
      caller: string | null,
      tokenOut: string | null,
      tokenAmountOut: null
    ): EventFilter;

    LOG_JOIN(
      caller: string | null,
      tokenIn: string | null,
      tokenAmountIn: null
    ): EventFilter;

    PoolExited(from: string | null, amount: null): EventFilter;

    PoolExitedWithLoss(
      from: string | null,
      amount: null,
      lossTokens: null
    ): EventFilter;

    PoolJoined(from: string | null, amount: null): EventFilter;
  };

  estimate: {};
}
