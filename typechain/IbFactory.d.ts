/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from "ethers";
import {Listener, Provider} from "ethers/providers";
import {Arrayish, BigNumber, BigNumberish, Interface} from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface IbFactoryInterface extends Interface {
  functions: {
    newBPool: TypedFunctionDescription<{encode([]: []): string}>;
  };

  events: {};
}

export class IbFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IbFactory;
  attach(addressOrName: string): IbFactory;
  deployed(): Promise<IbFactory>;

  on(event: EventFilter | string, listener: Listener): IbFactory;
  once(event: EventFilter | string, listener: Listener): IbFactory;
  addListener(eventName: EventFilter | string, listener: Listener): IbFactory;
  removeAllListeners(eventName: EventFilter | string): IbFactory;
  removeListener(eventName: any, listener: Listener): IbFactory;

  interface: IbFactoryInterface;

  functions: {
    newBPool(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    "newBPool()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  newBPool(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  "newBPool()"(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    newBPool(overrides?: TransactionOverrides): Promise<BigNumber>;

    "newBPool()"(overrides?: TransactionOverrides): Promise<BigNumber>;
  };
}
