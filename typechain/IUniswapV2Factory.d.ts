/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from "ethers";
import {Listener, Provider} from "ethers/providers";
import {Arrayish, BigNumber, BigNumberish, Interface} from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface IUniswapV2FactoryInterface extends Interface {
  functions: {
    getPair: TypedFunctionDescription<{
      encode([tokenA, tokenB]: [string, string]): string;
    }>;
  };

  events: {};
}

export class IUniswapV2Factory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IUniswapV2Factory;
  attach(addressOrName: string): IUniswapV2Factory;
  deployed(): Promise<IUniswapV2Factory>;

  on(event: EventFilter | string, listener: Listener): IUniswapV2Factory;
  once(event: EventFilter | string, listener: Listener): IUniswapV2Factory;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): IUniswapV2Factory;
  removeAllListeners(eventName: EventFilter | string): IUniswapV2Factory;
  removeListener(eventName: any, listener: Listener): IUniswapV2Factory;

  interface: IUniswapV2FactoryInterface;

  functions: {
    getPair(
      tokenA: string,
      tokenB: string,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "getPair(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: TransactionOverrides
    ): Promise<string>;
  };

  getPair(
    tokenA: string,
    tokenB: string,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "getPair(address,address)"(
    tokenA: string,
    tokenB: string,
    overrides?: TransactionOverrides
  ): Promise<string>;

  filters: {};

  estimate: {
    getPair(
      tokenA: string,
      tokenB: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getPair(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
