/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from "ethers";
import {Listener, Provider} from "ethers/providers";
import {Arrayish, BigNumber, BigNumberish, Interface} from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface PProxiedFactoryInterface extends Interface {
  functions: {
    balancerFactory: TypedFunctionDescription<{encode([]: []): string}>;

    init: TypedFunctionDescription<{
      encode([_balancerFactory, _implementation]: [string, string]): string;
    }>;

    isPool: TypedFunctionDescription<{encode([]: [string]): string}>;

    newProxiedSmartPool: TypedFunctionDescription<{
      encode([
        _name,
        _symbol,
        _initialSupply,
        _tokens,
        _amounts,
        _weights,
        _cap
      ]: [
        string,
        string,
        BigNumberish,
        string[],
        BigNumberish[],
        BigNumberish[],
        BigNumberish
      ]): string;
    }>;

    pools: TypedFunctionDescription<{encode([]: [BigNumberish]): string}>;

    setImplementation: TypedFunctionDescription<{
      encode([_implementation]: [string]): string;
    }>;

    smartPoolImplementation: TypedFunctionDescription<{encode([]: []): string}>;

    transferOwnership: TypedFunctionDescription<{
      encode([_newOwner]: [string]): string;
    }>;
  };

  events: {
    OwnerChanged: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;

    SmartPoolCreated: TypedEventDescription<{
      encodeTopics([poolAddress, name, symbol]: [
        string | null,
        null,
        null
      ]): string[];
    }>;
  };
}

export class PProxiedFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): PProxiedFactory;
  attach(addressOrName: string): PProxiedFactory;
  deployed(): Promise<PProxiedFactory>;

  on(event: EventFilter | string, listener: Listener): PProxiedFactory;
  once(event: EventFilter | string, listener: Listener): PProxiedFactory;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): PProxiedFactory;
  removeAllListeners(eventName: EventFilter | string): PProxiedFactory;
  removeListener(eventName: any, listener: Listener): PProxiedFactory;

  interface: PProxiedFactoryInterface;

  functions: {
    balancerFactory(overrides?: TransactionOverrides): Promise<string>;

    "balancerFactory()"(overrides?: TransactionOverrides): Promise<string>;

    init(
      _balancerFactory: string,
      _implementation: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "init(address,address)"(
      _balancerFactory: string,
      _implementation: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    isPool(arg0: string, overrides?: TransactionOverrides): Promise<boolean>;

    "isPool(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    newProxiedSmartPool(
      _name: string,
      _symbol: string,
      _initialSupply: BigNumberish,
      _tokens: string[],
      _amounts: BigNumberish[],
      _weights: BigNumberish[],
      _cap: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "newProxiedSmartPool(string,string,uint256,address[],uint256[],uint256[],uint256)"(
      _name: string,
      _symbol: string,
      _initialSupply: BigNumberish,
      _tokens: string[],
      _amounts: BigNumberish[],
      _weights: BigNumberish[],
      _cap: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    pools(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "pools(uint256)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    setImplementation(
      _implementation: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setImplementation(address)"(
      _implementation: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    smartPoolImplementation(overrides?: TransactionOverrides): Promise<string>;

    "smartPoolImplementation()"(
      overrides?: TransactionOverrides
    ): Promise<string>;

    transferOwnership(
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  balancerFactory(overrides?: TransactionOverrides): Promise<string>;

  "balancerFactory()"(overrides?: TransactionOverrides): Promise<string>;

  init(
    _balancerFactory: string,
    _implementation: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "init(address,address)"(
    _balancerFactory: string,
    _implementation: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  isPool(arg0: string, overrides?: TransactionOverrides): Promise<boolean>;

  "isPool(address)"(
    arg0: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  newProxiedSmartPool(
    _name: string,
    _symbol: string,
    _initialSupply: BigNumberish,
    _tokens: string[],
    _amounts: BigNumberish[],
    _weights: BigNumberish[],
    _cap: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "newProxiedSmartPool(string,string,uint256,address[],uint256[],uint256[],uint256)"(
    _name: string,
    _symbol: string,
    _initialSupply: BigNumberish,
    _tokens: string[],
    _amounts: BigNumberish[],
    _weights: BigNumberish[],
    _cap: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  pools(arg0: BigNumberish, overrides?: TransactionOverrides): Promise<string>;

  "pools(uint256)"(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  setImplementation(
    _implementation: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setImplementation(address)"(
    _implementation: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  smartPoolImplementation(overrides?: TransactionOverrides): Promise<string>;

  "smartPoolImplementation()"(
    overrides?: TransactionOverrides
  ): Promise<string>;

  transferOwnership(
    _newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    _newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    OwnerChanged(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    SmartPoolCreated(
      poolAddress: string | null,
      name: null,
      symbol: null
    ): EventFilter;
  };

  estimate: {
    balancerFactory(overrides?: TransactionOverrides): Promise<BigNumber>;

    "balancerFactory()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    init(
      _balancerFactory: string,
      _implementation: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "init(address,address)"(
      _balancerFactory: string,
      _implementation: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    isPool(arg0: string, overrides?: TransactionOverrides): Promise<BigNumber>;

    "isPool(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    newProxiedSmartPool(
      _name: string,
      _symbol: string,
      _initialSupply: BigNumberish,
      _tokens: string[],
      _amounts: BigNumberish[],
      _weights: BigNumberish[],
      _cap: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "newProxiedSmartPool(string,string,uint256,address[],uint256[],uint256[],uint256)"(
      _name: string,
      _symbol: string,
      _initialSupply: BigNumberish,
      _tokens: string[],
      _amounts: BigNumberish[],
      _weights: BigNumberish[],
      _cap: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    pools(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "pools(uint256)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setImplementation(
      _implementation: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setImplementation(address)"(
      _implementation: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    smartPoolImplementation(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "smartPoolImplementation()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
