/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, Signer} from "ethers";
import {Provider} from "ethers/providers";

import {IpProxiedFactory} from "./IpProxiedFactory";

export class IpProxiedFactoryFactory {
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IpProxiedFactory {
    return new Contract(address, _abi, signerOrProvider) as IpProxiedFactory;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_balancerFactory",
        type: "address"
      },
      {
        internalType: "address",
        name: "_implementation",
        type: "address"
      }
    ],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string"
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string"
      },
      {
        internalType: "uint256",
        name: "_initialSupply",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "_tokens",
        type: "address[]"
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "_weights",
        type: "uint256[]"
      },
      {
        internalType: "uint256",
        name: "_cap",
        type: "uint256"
      }
    ],
    name: "newProxiedSmartPool",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  }
];
